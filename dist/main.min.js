(function (debug) {
'use strict';

debug = 'default' in debug ? debug['default'] : debug;

/**
 * Says hello.
 * @param  {String} name a name
 * @return {String}      a greeting for `name`
 */
function sayHelloTo(name) {
  var toSay = "Hello, " + name + "!";

  return toSay;
}

/**
 * Says goodbye.
 * @param  {String} name a name
 * @return {String}      a farewell for `name`
 */

/**
 * Adds all the values in an array.
 * @param  {Array} arr an array of numbers
 * @return {Number}    the sum of all the array values
 */
var addArray = function addArray(arr) {
  var result = arr.reduce(function (a, b) {
    return a + b;
  }, 0);

  return result;
};

// Import a couple modules for testing.
// Import a logger for easier debugging.
var log = debug('app:log');

// The logger should only be enabled if weâ€™re not in production.
{

    // Enable the logger.
    debug.enable('*');
    log('Logging is enabled!');

    // Enable LiveReload
    document.write('<script src="http://' + (location.host || 'localhost').split(':')[0] + ':35729/livereload.js?snipver=1"></' + 'script>');
}

// Run some functions from our imported modules.
var result1 = sayHelloTo('Jason');
var result2 = addArray([1, 2, 3, 4]);

// Print the results on the page.
var printTarget = document.getElementsByClassName('debug__output')[0];

printTarget.innerText = 'sayHelloTo(\'Jason\') => ' + result1 + '\n\n';
printTarget.innerText += 'addArray([1, 2, 3, 4]) => ' + result2;

}(debug));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWFpbi5taW4uanMiLCJzb3VyY2VzIjpbIi4uL3NyYy9tb2R1bGVzL21vZDEuanMiLCIuLi9zcmMvbW9kdWxlcy9tb2QyLmpzIiwiLi4vc3JjL21haW4uanMiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBTYXlzIGhlbGxvLlxuICogQHBhcmFtICB7U3RyaW5nfSBuYW1lIGEgbmFtZVxuICogQHJldHVybiB7U3RyaW5nfSAgICAgIGEgZ3JlZXRpbmcgZm9yIGBuYW1lYFxuICovXG5leHBvcnQgZnVuY3Rpb24gc2F5SGVsbG9UbyhuYW1lKSB7XG4gICAgY29uc3QgdG9TYXkgPSBgSGVsbG8sICR7bmFtZX0hYDtcblxuICAgIHJldHVybiB0b1NheTtcbn1cblxuLyoqXG4gKiBTYXlzIGdvb2RieWUuXG4gKiBAcGFyYW0gIHtTdHJpbmd9IG5hbWUgYSBuYW1lXG4gKiBAcmV0dXJuIHtTdHJpbmd9ICAgICAgYSBmYXJld2VsbCBmb3IgYG5hbWVgXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBzYXlHb29kYnllVG8obmFtZSkge1xuICAgIGNvbnN0IHRvU2F5ID0gYExhdGVyLCAke25hbWV9IWA7XG5cbiAgICByZXR1cm4gdG9TYXk7XG59XG4iLCIvKipcbiAqIEFkZHMgYWxsIHRoZSB2YWx1ZXMgaW4gYW4gYXJyYXkuXG4gKiBAcGFyYW0gIHtBcnJheX0gYXJyIGFuIGFycmF5IG9mIG51bWJlcnNcbiAqIEByZXR1cm4ge051bWJlcn0gICAgdGhlIHN1bSBvZiBhbGwgdGhlIGFycmF5IHZhbHVlc1xuICovXG5jb25zdCBhZGRBcnJheSA9IGFyciA9PiB7XG4gICAgY29uc3QgcmVzdWx0ID0gYXJyLnJlZHVjZSgoYSwgYikgPT4gYSArIGIsIDApO1xuXG4gICAgcmV0dXJuIHJlc3VsdDtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IGFkZEFycmF5O1xuIiwiXG5cbi8vIEltcG9ydCBhIGNvdXBsZSBtb2R1bGVzIGZvciB0ZXN0aW5nLlxuaW1wb3J0IHsgc2F5SGVsbG9UbyB9IGZyb20gJy4vbW9kdWxlcy9tb2QxJztcbmltcG9ydCBhZGRBcnJheSBmcm9tICcuL21vZHVsZXMvbW9kMic7XG5cbi8vIEltcG9ydCBhIGxvZ2dlciBmb3IgZWFzaWVyIGRlYnVnZ2luZy5cbmltcG9ydCBkZWJ1ZyBmcm9tICdkZWJ1Zyc7XG5jb25zdCBsb2cgPSBkZWJ1ZygnYXBwOmxvZycpO1xuXG4vLyBUaGUgbG9nZ2VyIHNob3VsZCBvbmx5IGJlIGVuYWJsZWQgaWYgd2XigJlyZSBub3QgaW4gcHJvZHVjdGlvbi5cbmlmIChFTlYgIT09ICdwcm9kdWN0aW9uJykge1xuXG4gICAgLy8gRW5hYmxlIHRoZSBsb2dnZXIuXG4gICAgZGVidWcuZW5hYmxlKCcqJyk7XG4gICAgbG9nKCdMb2dnaW5nIGlzIGVuYWJsZWQhJyk7XG5cbiAgICAvLyBFbmFibGUgTGl2ZVJlbG9hZFxuICAgIGRvY3VtZW50LndyaXRlKFxuICAgICAgICAnPHNjcmlwdCBzcmM9XCJodHRwOi8vJyArIChsb2NhdGlvbi5ob3N0IHx8ICdsb2NhbGhvc3QnKS5zcGxpdCgnOicpWzBdICtcbiAgICAgICAgJzozNTcyOS9saXZlcmVsb2FkLmpzP3NuaXB2ZXI9MVwiPjwvJyArICdzY3JpcHQ+J1xuICAgICk7XG59IGVsc2Uge1xuICAgIGRlYnVnLmRpc2FibGUoKTtcbn1cblxuLy8gUnVuIHNvbWUgZnVuY3Rpb25zIGZyb20gb3VyIGltcG9ydGVkIG1vZHVsZXMuXG5jb25zdCByZXN1bHQxID0gc2F5SGVsbG9UbygnSmFzb24nKTtcbmNvbnN0IHJlc3VsdDIgPSBhZGRBcnJheShbMSwgMiwgMywgNF0pO1xuXG4vLyBQcmludCB0aGUgcmVzdWx0cyBvbiB0aGUgcGFnZS5cbmNvbnN0IHByaW50VGFyZ2V0ID0gZG9jdW1lbnQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSgnZGVidWdfX291dHB1dCcpWzBdO1xuXG5wcmludFRhcmdldC5pbm5lclRleHQgPSBgc2F5SGVsbG9UbygnSmFzb24nKSA9PiAke3Jlc3VsdDF9XFxuXFxuYDtcbnByaW50VGFyZ2V0LmlubmVyVGV4dCArPSBgYWRkQXJyYXkoWzEsIDIsIDMsIDRdKSA9PiAke3Jlc3VsdDJ9YDsiXSwibmFtZXMiOlsic2F5SGVsbG9UbyIsIm5hbWUiLCJ0b1NheSIsImFkZEFycmF5IiwicmVzdWx0IiwiYXJyIiwicmVkdWNlIiwiYSIsImIiLCJsb2ciLCJkZWJ1ZyIsIkVOViIsImVuYWJsZSIsIndyaXRlIiwibG9jYXRpb24iLCJob3N0Iiwic3BsaXQiLCJyZXN1bHQxIiwicmVzdWx0MiIsInByaW50VGFyZ2V0IiwiZG9jdW1lbnQiLCJnZXRFbGVtZW50c0J5Q2xhc3NOYW1lIiwiaW5uZXJUZXh0Il0sIm1hcHBpbmdzIjoiOzs7OztBQUFBOzs7OztBQUtBLEFBQU8sU0FBU0EsVUFBVCxDQUFvQkMsSUFBcEIsRUFBMEI7TUFDdkJDLG9CQUFrQkQsSUFBbEIsTUFBTjs7U0FFT0MsS0FBUDs7Ozs7OztHQVFKLEFBQU87O0FDaEJQOzs7OztBQUtBLElBQU1DLFdBQVcsU0FBWEEsUUFBVyxNQUFPO01BQ2RDLFNBQVNDLElBQUlDLE1BQUosQ0FBVyxVQUFDQyxDQUFELEVBQUlDLENBQUo7V0FBVUQsSUFBSUMsQ0FBZDtHQUFYLEVBQTRCLENBQTVCLENBQWY7O1NBRU9KLE1BQVA7Q0FISixDQU1BOztBQ1RBO0FBQ0EsQUFDQSxBQUVBO0FBQ0EsQUFDQSxJQUFNSyxNQUFNQyxNQUFNLFNBQU4sQ0FBWjs7O0FBR0EsQUFBSUMsQUFBSixBQUEwQjs7O1VBR2hCQyxNQUFOLENBQWEsR0FBYjtRQUNJLHFCQUFKOzs7YUFHU0MsS0FBVCxDQUNJLHlCQUF5QixDQUFDQyxTQUFTQyxJQUFULElBQWlCLFdBQWxCLEVBQStCQyxLQUEvQixDQUFxQyxHQUFyQyxFQUEwQyxDQUExQyxDQUF6QixHQUNBLG9DQURBLEdBQ3VDLFNBRjNDO0NBUEo7OztBQWdCQSxJQUFNQyxVQUFVakIsV0FBVyxPQUFYLENBQWhCO0FBQ0EsSUFBTWtCLFVBQVVmLFNBQVMsQ0FBQyxDQUFELEVBQUksQ0FBSixFQUFPLENBQVAsRUFBVSxDQUFWLENBQVQsQ0FBaEI7OztBQUdBLElBQU1nQixjQUFjQyxTQUFTQyxzQkFBVCxDQUFnQyxlQUFoQyxFQUFpRCxDQUFqRCxDQUFwQjs7QUFFQUYsWUFBWUcsU0FBWixpQ0FBa0RMLE9BQWxEO0FBQ0FFLFlBQVlHLFNBQVosbUNBQXNESixPQUF0RDs7In0=
